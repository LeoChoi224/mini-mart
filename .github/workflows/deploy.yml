name: CI/CD to EC2 (Docker Hub + Docker Compose)

on:
  push:
    branches: [ main ]          # 필요시 develop 등으로 변경
  workflow_dispatch:            # 수동 실행 버튼

env:
  IMAGE: leochoi224/mini-mart   # 본인 Docker Hub 리포지토리
  APP_PORT: "8080"
  HEALTH_URL: "http://localhost:8080/actuator/health"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.out.outputs.TAG }}   # 다음 job에서 사용

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 태그 생성: SHORT_SHA(7자리) + main이면 latest도 함께 밀어줌
      - name: Prepare tags
        id: prep
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "EXTRA_TAG=latest" >> $GITHUB_OUTPUT
          else
            echo "EXTRA_TAG=" >> $GITHUB_OUTPUT
          fi

      # ⬇️ JAR 만들기 (추가됨)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Build with Gradle (make jar)
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 캐시를 이용한 빠른 빌드 + 멀티 태그 푸시
      - name: Build and Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile         # 네가 쓰는 Dockerfile 경로
          platforms: linux/amd64            # EC2가 x86이면 amd64만으로 충분
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ steps.prep.outputs.SHORT_SHA }}
            ${{ env.IMAGE }}:${{ steps.prep.outputs.EXTRA_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export tag output
        id: out
        run: echo "TAG=${{ steps.prep.outputs.SHORT_SHA }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Connect & deploy on EC2 (via SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e

            echo "==> Ensure docker is running"
            sudo systemctl enable --now docker || true

            echo "==> Ensure docker-compose is available"
            if ! command -v docker-compose >/dev/null 2>&1; then
              sudo dnf -y install python3-pip || true
              sudo pip3 install docker-compose || true
            fi

            echo "==> Prepare deploy workspace"
            mkdir -p ~/mini-mart
            cd ~/mini-mart

            echo "==> Login Docker Hub (for pull)"
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # ---- compose가 변수 기반 이미지 태그를 쓰도록 보정(최초 1회 생성) ----
            if ! grep -q 'image: ${IMAGE' docker-compose.yml 2>/dev/null; then
              cat > docker-compose.yml <<'YAML'
            version: "3.8"

            services:
              db:
                image: mysql:8.0
                container_name: mini-mart-mysql
                environment:
                  MYSQL_ROOT_PASSWORD: rootpass
                  MYSQL_DATABASE: mini_mart
                  MYSQL_USER: app
                  MYSQL_PASSWORD: app1234
                  TZ: Asia/Seoul
                command: >
                  --character-set-server=utf8mb4
                  --collation-server=utf8mb4_unicode_ci
                volumes:
                  - db_data:/var/lib/mysql
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-prootpass"]
                  interval: 10s
                  timeout: 5s
                  retries: 10
                restart: unless-stopped
                ports:
                  - "3306:3306"

              app:
                image: ${IMAGE}:${APP_TAG}
                container_name: mini-mart-app
                depends_on:
                  db:
                    condition: service_healthy
                environment:
                  SPRING_PROFILES_ACTIVE: prod
                  SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/mini_mart?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
                  SPRING_DATASOURCE_USERNAME: app
                  SPRING_DATASOURCE_PASSWORD: app1234
                  SERVER_ADDRESS: 0.0.0.0
                  SERVER_PORT: 8080
                  SPRING_JPA_HIBERNATE_DDL_AUTO: update
                  MAIL_PASSWORD: ${MAIL_PASSWORD}
                ports:
                  - "8080:8080"
                restart: unless-stopped

            volumes:
              db_data:
            YAML
            fi

            # .env에 현재/이전 태그 기록(+ 비밀 주입)
            touch .env
            if grep -q '^APP_TAG=' .env; then
              PREV_TAG=$(grep '^APP_TAG=' .env | cut -d= -f2-)
            else
              PREV_TAG=""
            fi

            NEW_TAG="${{ needs.build-and-push.outputs.TAG }}"
            # 서버에서 사용할 환경변수 저장
            awk 'BEGIN{OFS=FS="="} !/^APP_TAG=|^IMAGE=|^MAIL_PASSWORD=/' .env > .env.tmp || true
            mv .env.tmp .env || true
            echo "IMAGE=${{ env.IMAGE }}" >> .env
            echo "APP_TAG=${NEW_TAG}"   >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env

            echo "==> Pull & recreate"
            set -o pipefail
            docker-compose --env-file .env pull app | sed -e 's/DOCKER_AUTH_CONFIG.*/(auth hidden)/' || true
            docker-compose --env-file .env up -d --remove-orphans

            echo "==> Health check"
            for i in 1 2 3 4 5 6; do
              if curl -fsS ${{ env.HEALTH_URL }} | grep -qi '"status":"UP"'; then
                echo "Health OK"
                echo "$NEW_TAG" > .last_success_tag
                exit 0
              fi
              echo "Waiting health...($i/6)"
              sleep 5
            done

            echo "!! Health check FAILED. Start rollback"
            if [ -n "$PREV_TAG" ]; then
              awk 'BEGIN{OFS=FS="="} !/^APP_TAG=/' .env > .env.tmp || true
              mv .env.tmp .env || true
              echo "APP_TAG=${PREV_TAG}" >> .env
              docker-compose --env-file .env up -d --remove-orphans
              sleep 5
              curl -fsS ${{ env.HEALTH_URL }} || true
              echo "Rolled back to ${PREV_TAG}"
            else
              echo "No previous tag to rollback. Please check logs."
            fi